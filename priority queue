#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct Priority_Queue {
    int element;
    int priority;
} pqueue;

pqueue pq[MAX];
int front = -1, rear = -1;

int isempty() {
    return (front == -1) ? 1 : 0;
}

int isFull() {
    return (rear == MAX - 1) ? 1 : 0;
}

void enqueue(int data, int priority) {
    if (isFull()) {
        printf("Queue Overflow !!!\n");
        return;
    }

    rear++;
    pq[rear].element = data;
    pq[rear].priority = priority;

    if (front == -1) {
        front = rear;
    }

    printf("Element Inserted!!!!\n");
}

int Get_higher_priority_element() {
    int max = -1, index = -1;
    for (int i = front; i <= rear; i++) {
        if (pq[i].priority > max) {
            max = pq[i].priority;
            index = i;
        }
    }
    return index;
}

int dequeue() {
    if (isempty()) {
        printf("Queue Underflow !!!\n");
        return -1;  // Return -1 if the queue is empty
    }

    int index = Get_higher_priority_element();
    int data = pq[index].element;

    // Adjust front and rear if needed
    if (index == front && index == rear) {
        front = rear = -1;  // Queue is empty now
    } else if (index == front) {
        front++;  // Move front pointer forward
    } else {
        // Shift elements left after removal
        for (int i = index; i < rear; i++) {
            pq[i] = pq[i + 1];
        }
        rear--;
    }

    return data;
}

int peek() {
    if (isempty()) {
        printf("Queue is empty!!!\n");
        return -1;  // Return -1 if the queue is empty
    }

    int i = Get_higher_priority_element();
    return pq[i].element;
}

void display() {
    if (isempty()) {
        printf("Queue is empty !!!\n");
        return;
    }

    printf("Queue elements are:\n");
    for (int i = front; i <= rear; i++) {
        printf("Element: %d => Priority: %d\n", pq[i].element, pq[i].priority);
    }
    printf("\n");
}

int main() {
    while (1) {
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");

        int choice, data, pr;
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                if (isFull()) {
                    printf("Queue Overflow !!!\n");
                } else {
                    printf("Enter Element = ");
                    scanf("%d", &data);
                    printf("Enter Priority = ");
                    scanf("%d", &pr);
                    enqueue(data, pr);
                }
                break;

            case 2:
                if (isempty()) {
                    printf("Queue Underflow !!!\n");
                } else {
                    printf("%d is dequeued (removed) from the queue\n", dequeue());
                }
                break;

            case 3:
                printf("Element available at the front of the queue is = %d\n", peek());
                break;

            case 4:
                display();
                break;

            case 5:
                exit(0);
                break;

            default:
                printf("Invalid choice !!!!!\n");
        }

        system("pause");
    }

    return 0;
}
